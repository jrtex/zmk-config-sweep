/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include "../zmk-nodefree-config/helper.h"
#include "../zmk-nodefree-config/keypos_def/keypos_42keys.h"

#define DEF 0
#define NUM 1
#define FUN 2
#define MED 3
#define NAV 4
#define DNV 5
#define KRB 6
#define KR2 7


// Two-hand combos:
ZMK_COMBO(combo_hrcaps, &caps_word, LB1 RB1, ALL) // D H

// Left-hand combos:
ZMK_COMBO(combo_close,  &kp LC(W), LT4 LT3, ALL, 20) // Q W
ZMK_COMBO(combo_esc,    &kp ESC,   LT3 LT2, ALL, 20) // W F
ZMK_COMBO(combo_tab,    &kp TAB,   LT2 LT1, ALL, 20) // F P
ZMK_COMBO(combo_ctlaltdel, &kp LC(LA(DEL)), LT4 LT3 LT2 LT1, ALL, 20) // Q W F P

ZMK_COMBO(combo_all,    &kp LC(A), LM4 LM3, ALL, 20) // A R
ZMK_COMBO(combo_bspace, &kp BSPC,  LM3 LM2, ALL, 20) // R S
ZMK_COMBO(combo_del,    &kp DEL,   LM2 LM1, ALL, 20) // S T
ZMK_COMBO(combo_delw,   &kp LC(BSPC), LM3 LM2 LM1, ALL, 20) // R S T
ZMK_COMBO(combo_delln,  &delete_line, LM4 LM3 LM2 LM1, ALL, 20) // A R S T
ZMK_COMBO(combo_newln,  &mm_newline, LM1 LM0, ALL, 20) // T G

ZMK_COMBO(combo_undo,   &kp LC(Z), LB4 LB3, ALL, 20) // Z X
ZMK_COMBO(combo_copy,   &kp LC(C), LB3 LB2, ALL, 20) // X C
ZMK_COMBO(combo_paste,  &kp LC(V), LB2 LB1, ALL, 20) // C D
ZMK_COMBO(combo_cut,    &kp LC(X), LB3 LB2 LB1, ALL, 20) // X C D
ZMK_COMBO(combo_selln,  &select_line, LB1 LB0, ALL, 20) // D V

// Right-hand combos:
ZMK_COMBO(combo_bqt,    &kp GRAVE, RT0 RT1, ALL, 20) // J L
ZMK_COMBO(combo_tildgr, &tildegr,  RT1 RT2, ALL, 20) // L U
ZMK_COMBO(combo_smcln,  &kp SEMI,  RT2 RT3, ALL, 20) // U Y
ZMK_COMBO(combo_qst,    &kp QMARK, RT1 RT3, ALL, 20) // L Y 
ZMK_COMBO(combo_excl,   &kp EXCL,  RT1 RT4, ALL, 20) // L ;
ZMK_COMBO(combo_plus,   &kp PLUS,  RT1 RT2 RT3, ALL, 20) // L U Y

ZMK_COMBO(combo_undscr, &kp UNDER, RM0 RM1, ALL, 20) // M N
ZMK_COMBO(combo_dash,   &kp MINUS, RM1 RM2, ALL, 20) // N E
ZMK_COMBO(combo_sqt,    &kp SQT,   RM2 RM3, ALL, 20) // E I
ZMK_COMBO(combo_dqt,    &kp DQT,   RM3 RM4, ALL, 20) // I O
ZMK_COMBO(combo_equal,  &kp EQUAL, RM1 RM2 RM3, ALL, 20) // N E I
ZMK_COMBO(combo_colon,  &kp COLON, RM1 RM3, ALL, 20) // N I

ZMK_COMBO(combo_pipe,   &kp PIPE,  RT0 RM0, ALL, 20) // M J
ZMK_COMBO(combo_fslsh,  &kp FSLH,  RM1 RT2, ALL, 20) // N U
ZMK_COMBO(combo_bslsh,  &kp BSLH,  RT2 RM3, ALL, 20) // U I
ZMK_COMBO(combo_lbkt,   &kp LBKT,  RB1 RM2, ALL, 20) // H E
ZMK_COMBO(combo_rbkt,   &kp RBKT,  RM2 RB3, ALL, 20) // E >

ZMK_COMBO(combo_autcrct, &autocrct, RB0 RB1, ALL, 20) // K H
ZMK_COMBO(combo_dotdotsl, &dot_dot_slash, RB3 RB4, ALL, 20) // . / 

// Thumbs:
ZMK_COMBO(combo_space,  &kp SPACE, LH0 LH1, ALL, 20) // Two thumb keys: repeatable space
ZMK_COMBO(combo_ret,    &kp RET,   RH0 RH1, ALL, 20) // repeatable enter

// Condidional layers
// ZMK_CONDITIONAL_LAYER(NUM FUN, MED) -- Only last Conditional layer seems to work
ZMK_CONDITIONAL_LAYER(DNV KRB, KR2)

&lt {
        tapping-term-ms = <250>;
};

/ {
        macros {
                alt_tab: alt_tab {
                        label = "Alt-Tab";
                        compatible = "zmk,behavior-macro";
                        #binding-cells = <0>;
                        bindings
                                = <&macro_press &kp RALT>
                                , <&macro_tap &kp TAB>
                                , <&macro_pause_for_release>
                                , <&macro_release &kp RALT>
                                ;
                };

                alt_tab2: alt_tab2 {
                        label = "Alt-Tab2";
                        compatible = "zmk,behavior-macro";
                        #binding-cells = <0>;
                        bindings
                                = <&macro_tap &kt RALT>
                                , <&macro_tap &kp TAB>
                                , <&macro_wait_time 1000>
                                , <&macro_tap &kt RALT>
                                ;
                };

                select_line: select_line {
                        label = "Select Line";
                        compatible = "zmk,behavior-macro";
                        #binding-cells = <0>;
                        bindings
                                = <&macro_tap &kp END>
                                , <&macro_tap &kp LS(HOME)>
                                ;
                };

                delete_line: delete_line {
                        label = "Delete Line";
                        compatible = "zmk,behavior-macro";
                        #binding-cells = <0>;
                        bindings
                                = <&macro_tap &kp END>
                                , <&macro_tap &kp LS(HOME)>
                                , <&macro_tap &kp LS(HOME)>
                                , <&macro_tap &kp BSPC>
                                , <&macro_tap &kp BSPC>
                                ;
                };

                new_line: new_line {
                        label = "New Line";
                        compatible = "zmk,behavior-macro";
                        #binding-cells = <0>;
                        bindings
                                = <&macro_tap &kp END>
                                , <&macro_tap &kp RET>
                                ;
                };

                new_line_up: new_line_up {
                        label = "New Line Up";
                        compatible = "zmk,behavior-macro";
                        #binding-cells = <0>;
                        bindings
                                = <&macro_tap &kp UP>
                                , <&macro_tap &kp END>
                                , <&macro_tap &kp RET>
                                ;
                };

                dot_dot_slash: dot_dot_slash {
                        label = "Dot Dot Slash";
                        compatible = "zmk,behavior-macro";
                        #binding-cells = <0>;
                        bindings
                                = <&macro_tap &kp DOT>
                                , <&macro_tap &kp DOT>
                                , <&macro_tap &kp FSLH>
                                ;
                };

                autocrct: autocorrect {
                        label = "Autocorrect";
                        compatible = "zmk,behavior-macro";
                        #binding-cells = <0>;
                        bindings
                                = <&macro_tap &kp K_APP>
                                , <&macro_tap &kp DOWN>
                                , <&macro_tap &kp RETURN>
                                ;
                };
        };

        behaviors {
                hm: homerow_mods {
                        compatible = "zmk,behavior-hold-tap";
                        label = "HOMEROW_MODS";
                        #binding-cells = <2>;
                        tapping-term-ms = <200>;
                        quick-tap-ms = <0>;
                        require-prior-idle-ms = <100>;
                        flavor = "tap-preferred";
                        bindings = <&kp>, <&kp>;
                };

                lt_rpi: layertap_requireprioridle {
                        compatible = "zmk,behavior-hold-tap";
                        label = "RPI LAYER TAP";
                        #binding-cells = <2>;
                        tapping-term-ms = <200>;
                        quick-tap-ms = <0>;
                        require-prior-idle-ms = <200>;
                        flavor = "tap-preferred";
                        bindings = <&mo>, <&kp>;
                };

                lt_hp: layertap_holdpreferred {
                        compatible = "zmk,behavior-hold-tap";
                        label = "HP LAYER TAP";
                        #binding-cells = <2>;
                        tapping-term-ms = <200>;
                        quick-tap-ms = <0>;
                        flavor = "hold-preferred";
                        bindings = <&mo>, <&kp>;
                };

                ltst_hp: layertapstick_holdpreferred {
                        compatible = "zmk,behavior-hold-tap";
                        label = "HP LAYER TAP";
                        #binding-cells = <2>;
                        tapping-term-ms = <200>;
                        quick-tap-ms = <0>;
                        flavor = "hold-preferred";
                        bindings = <&mo>, <&sk>;
                };

                tildegr: tilde_grave {
                        compatible = "zmk,behavior-mod-morph";
                        label = "TILDE_GRAVE";
                        #binding-cells = <0>;
                        bindings = <&kp TILDE>, <&kp GRAVE>;
                        mods = <(MOD_LSFT|MOD_RSFT)>;
                };

                mm_newline: mm_newline {
                        compatible = "zmk,behavior-mod-morph";
                        label = "Mod-morph newline";
                        #binding-cells = <0>;
                        bindings = <&new_line>, <&new_line_up>;
                        mods = <(MOD_LSFT|MOD_RSFT)>;
                };

                mm_delword: mm_delword {
                        compatible = "zmk,behavior-mod-morph";
                        label = "Mod-morph delete word";
                        #binding-cells = <0>;
                        bindings = <&kp LC(BSPC)>, <&kp LC(DEL)>;
                        mods = <(MOD_LSFT|MOD_RSFT)>;
                };

                td_alttab: td_alttab {
                        compatible = "zmk,behavior-tap-dance";
                        #binding-cells = <0>;
                        tapping-term-ms = <200>;
                        bindings = <&alt_tab>, <&kp LC(LA(TAB))>;
                };

                td_close: td_close {
                        compatible = "zmk,behavior-tap-dance";
                        #binding-cells = <0>;
                        tapping-term-ms = <200>;
                        bindings = <&kp LC(W)>, <&kp LA(F4)>;
                };

                td_nav: td_navlayer {
                        compatible = "zmk,behavior-tap-dance";
                        #binding-cells = <0>;
                        tapping-term-ms = <200>;
                        bindings = <&lt_rpi DNV SPACE>, <&lt_rpi NAV SPACE>;
                };
        };


// Max 9 characters per key
#define HMLGUIZ   &hm LGUI Z
#define HMLALTX   &hm LALT X
#define HMLCTLC   &hm LCTRL C
#define HMLSFTD   &hm LSHFT D
#define HMRSFTH   &hm RSHFT H
#define HMRCTLCOM &hm RCTRL COMMA
#define HMRALTDOT &hm RALT DOT
#define HMRGUISLH &hm RGUI FSLH
#define LTDNVSPAC &lt_rpi DNV SPACE
#define LTNUMTAB  &lt_hp NUM TAB
#define LTKRBRET  &lt_rpi KRB RETURN
#define LTFUNSTS  &ltst_hp FUN LSHIFT
#define STARSBL   &kp KP_MULTIPLY
#define BTCLR     &bt BT_CLR
#define BTSEL0    &bt BT_SEL 0
#define BTSEL1    &bt BT_SEL 1
#define BTSEL2    &bt BT_SEL 2
#define BTSEL3    &bt BT_SEL 3
#define BTSEL4    &bt BT_SEL 4
#define VOLUMUP   &kp C_VOL_UP
#define VOLUMDN   &kp C_VOL_DN
#define PREVIOUS  &kp C_PREV
#define NEXT      &kp C_NEXT
#define WORDLEFT  &kp LC(LEFT)
#define WORDRIGHT &kp LC(RIGHT)
#define DELWORD   &kp LC(BSPC)
#define TASKVIEW  &kp LG(TAB)
#define DESKLEFT  &kp LC(RG(LEFT))
#define DESKRIGHT &kp LC(RG(RIGHT))
#define LSTAB     &kp LS(TAB)
#define CTRALTTAB &kp LC(LA(TAB))
#define ZMOVELEFT &kp LG(LA(LC(LEFT)))
#define ZMOVERGHT &kp LG(LA(LC(RIGHT)))
#define ZNAV1     &kp LG(LC(N1))
#define ZNAV2     &kp LG(LC(N2))
#define ZNAV3     &kp LG(LC(N3))
#define ZNAV4     &kp LG(LC(N4))
#define WLEFT     &kp RG(LEFT)
#define WUP       &kp RG(UP)
#define WDOWN     &kp RG(DOWN)
#define WRIGHT    &kp RG(RIGHT)

        keymap {
                compatible = "zmk,keymap";
/* 
// ----------------------------------Layer template----------------------------------------------------------------------------
                        bindings = <
    &trans    &trans    &trans    &trans    &trans    &trans      &trans    &trans    &trans    &trans    &trans    &trans
    &trans    &trans    &trans    &trans    &trans    &trans      &trans    &trans    &trans    &trans    &trans    &trans
    &trans    &trans    &trans    &trans    &trans    &trans      &trans    &trans    &trans    &trans    &trans    &trans
                                  &trans    &trans    &trans      &trans    &trans    &trans
                        >;
*/

                // Layer 0: DEF
                default_layer {
// ----------------------------------------------------------------------------------------------------------------------------
// |  TAB    |  Q      |  W      |  F      |  P      |  B      | |  J      |  L      |  U      |  Y      |  ;      | BKSP     |
// |  NAV    |  A      |  R      |  S      |  T      |  G      | |  M      |  N      |  E      |  I      |  O      |  '       |
// | LSHIFT  |  Z/GUI  |  X/LALT |  C/LCTL |  D/LSFT |  V      | |  K      |  H/RSFT |  ,/RCTL |  ./RALT |  /-RGUI | RSHIFT   |
//                               | ------- | NUM     | SPACE   | | ENTER   | FUN     | ------- |
                        bindings = <
    &kp TAB   &kp Q     &kp W     &kp F     &kp P     &kp B       &kp J     &kp L     &kp U     &kp Y     &kp SEMI  &kp BSPC
    &mo NAV   &kp A     &kp R     &kp S     &kp T     &kp G       &kp M     &kp N     &kp E     &kp I     &kp O     &kp SQT
    &kp LSHFT HMLGUIZ   HMLALTX   HMLCTLC   HMLSFTD   &kp V       &kp K     HMRSFTH   HMRCTLCOM HMRALTDOT HMRGUISLH &kp RSHFT
                                  &none     LTNUMTAB  LTDNVSPAC   LTKRBRET  LTFUNSTS  &none
                        >;
                };
                // layer 1: NUM
                numb_layer {
// ----------------------------------------------------------------------------------------------------------------------------
// |  ESC    |  !      |  @      |  #      |  $      |  %      | |  ^      |  &      |  *      |  (      |  )      | BKSP     |
// | CTRL    |  1      |  2      |  3      |  4      |  5      | |  6      |  7      |  8      |  9      |  O      |          |
// | SHFT    |         |         |         |  5      |  %      | |         |         |         |         |         |          |
//                               |         | ------- |         | |         | MED     |         |
                        bindings = <
    &kp ESC   &kp EXCL  &kp AT    &kp HASH  &kp DLLR  &kp PRCNT   &kp CARET &kp AMPS  STARSBL   &kp LPAR  &kp RPAR  &kp BSPC
    &kp LCTRL &kp N1    &kp N2    &kp N3    &kp N4    &kp N5      &kp N6    &kp N7    &kp N8    &kp N9    &kp N0    &kp SQT
    &kp LSHFT &trans    &trans    &trans    &kp N5    &kp PRCNT   &trans    &trans    &trans    &trans    &trans    &trans
                                  &trans    &trans    &trans      &trans    &mo MED   &trans
                        >;
                };
                // layer 2: FUN
                func_layer {
// ----------------------------------------------------------------------------------------------------------------------------
// |         | F1      | F2      | F3      | F4      | F5      | | F6      | F7      | F8      | F9      | F10     |          |
// | CTRL    | F11     | F12     |         |         |         | |         |         |         |         |         |          |
// | BTCLR   | BT1     | BT2     | BT3     | BT4     | BT5     | |         |         |         |         |         |          |
//                               |         |         |         | |         |         | ------- |
                        bindings = <
    &trans    &kp F1    &kp F2    &kp F3    &kp F4    &kp F5      &kp F6    &kp F7    &kp F8    &kp F9    &kp F10   &trans
    &kp LCTRL &kp F11   &kp F12   &trans    &trans    &trans      &trans    &trans    &trans    &trans    &trans    &trans
    BTCLR     BTSEL0    BTSEL1    BTSEL2    BTSEL3    BTSEL4      &trans    &trans    &trans    &trans    &trans    &trans
                                  &trans    &mo MED   &trans      &trans    &trans    &trans
                        >;
                };
                // layer 3: MED
                media_layer {
// ----------------------------------------------------------------------------------------------------------------------------
// |         |         |         |         |         |         | |         |         |         |         | VOLDN   |         |
// |         |         |         |         |         |         | |         | PREVIOUS| PLAY    | NEXT    | VOLUP   |         |
// |         |         |         |         |         |         | |         |         |         |         |         |         |
//                               |         | ------- |         | |         | ------- |         |
                        bindings = <
    &trans    &trans    &trans    &trans    &trans    &trans      &trans    &trans    &trans    &trans    VOLUMUP   &trans
    &trans    &trans    &trans    &trans    &trans    &trans      &trans    PREVIOUS  &kp C_PP  NEXT      VOLUMDN   &trans
    &trans    &trans    &trans    &trans    &trans    &trans      &trans    &trans    &trans    &trans    &trans    &trans
                                  &trans    &trans    &trans      &trans    &trans    &trans
                        >;
                };
                // layer 4: NAV
                navigation_layer {
// ----------------------------------------------------------------------------------------------------------------------------
// |         |         | WORDLFT | UP      | WORDRGT |         | |         | INS     | HOME    | PAGEUP  |         | DELWORD  |
// | ------- |         | LEFT    | DOWN    | RIGHT   |         | |         | DEL     | END     | PAGEDN  |         |          |
// |         |         |         |         | APP     |         | |         |         |         |         |         |          |
//                               |         |         |         | |         |         |         |
                        bindings = <
    &trans    &trans    WORDLEFT  &kp UP    WORDRIGHT &trans      &trans    &kp INS   &kp HOME  &kp PG_UP &trans    DELWORD
    &trans    &trans    &kp LEFT  &kp DOWN  &kp RIGHT &trans      &trans    &kp DEL   &kp END   &kp PG_DN &trans    &trans
    &trans    &trans    &trans    &trans    &kp K_APP &trans      &trans    &trans    &trans    &trans    &trans    &trans
                                  &trans    &trans    &trans      &trans    &trans    &trans
                        >;
                };
                // layer 5: DNV
                desknav_layer {
// ----------------------------------------------------------------------------------------------------------------------------
// |         |         |         | TASKVIEW|         |         | |         |         |         |         |         |          |
// |         |         | DESKL   | TASKVIEW| DESKR   |         | |         |         |         |         |         |          |
// |         | DEL     | SHIFTTAB| ALT TAB | TAB     |         | |         |         |         |         |         |          |
//                               |         |         | ------- | |         |         |         |
                        bindings = <
    &trans    &trans    &trans    TASKVIEW  &trans    &trans      &trans    &trans    &trans    &trans    &trans    &trans
    &trans    &trans    DESKLEFT  TASKVIEW  DESKRIGHT CTRALTTAB   &trans    &trans    &trans    &trans    &trans    &trans
    &trans    &kp DEL   LSTAB     &td_alttab &kp TAB  &trans      &trans    &trans    &trans    &trans    &trans    &trans
                                  &trans    &trans    &trans      &trans    &trans    &trans
                        >;
                };
                // layer 6: Komorebi Shortcuts 1
                // This layer is essentially a Alt shortcut layer, all configs are found in whkd
                krb1_layer {
                        bindings = <
    &none     &kp LA(Q) &kp LA(W) &kp LA(F) &kp LA(P) &kp LA(B)   &kp LA(J) &kp LA(L) &kp LA(U)     &kp LA(Y)   &kp LA(SEMI)  &none
    &none     &kp LA(A) &kp LA(R) &kp LA(S) &kp LA(T) &kp LA(G)   &kp LA(M) &kp LA(N) &kp LA(E)     &kp LA(I)   &kp LA(O)     &none
    &none     &kp LA(Z) &kp LA(X) &kp LA(C) &kp LA(D) &kp LA(V)   &kp LA(K) &kp LA(H) &kp LA(COMMA) &kp LA(DOT) &kp LA(FSLH)  &none
                                  &trans    &trans    &trans      &trans    &trans    &trans
                        >;
                };
                // layer 7: Komorebi Shortcuts 2
                // This layer is essentially a Shift-Alt shortcut layer, all configs are found in whkd
                krb2_layer {
                        bindings = <
    &none  &kp LS(LA(Q)) &kp LS(LA(W)) &kp LS(LA(F)) &kp LS(LA(P)) &kp LS(LA(B))   &kp LS(LA(J)) &kp LS(LA(L)) &kp LS(LA(U))     &kp LS(LA(Y))   &kp LS(LA(SEMI))  &none
    &none  &kp LS(LA(A)) &kp LS(LA(R)) &kp LS(LA(S)) &kp LS(LA(T)) &kp LS(LA(G))   &kp LS(LA(M)) &kp LS(LA(N)) &kp LS(LA(E))     &kp LS(LA(I))   &kp LS(LA(O))     &none
    &none  &kp LS(LA(Z)) &kp LS(LA(X)) &kp LS(LA(C)) &kp LS(LA(D)) &kp LS(LA(V))   &kp LS(LA(K)) &kp LS(LA(H)) &kp LS(LA(COMMA)) &kp LS(LA(DOT)) &kp LS(LA(FSLH))  &none
                                  &trans    &trans    &trans      &trans    &trans    &trans
                        >;
                };
        };
};
