/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include "../zmk-nodefree-config/helper.h"
#include "../zmk-nodefree-config/keypos_def/keypos_34keys.h"

#define DEF 0
#define NUM 1
#define FUN 2
#define NAV 3
#define MED 4


// Two-hand combos:
ZMK_COMBO(combo_hrcaps, &caps_word, LB1 RB1, ALL) // D H

// Left-hand combos:
ZMK_COMBO(combo_close,  &kp LC(W), LT4 LT3, ALL, 20) // Q W
ZMK_COMBO(combo_esc,    &kp ESC,   LT3 LT2, ALL, 20) // W F
ZMK_COMBO(combo_tab,    &kp TAB,   LT2 LT1, ALL, 20) // F P
ZMK_COMBO(combo_ctlaltdel, &kp LC(LA(DEL)), LT4 LT3 LT2 LT1, ALL, 20) // Q W F P

ZMK_COMBO(combo_all,    &kp LC(A), LM4 LM3, ALL, 20) // A R
ZMK_COMBO(combo_bspace, &kp BSPC,  LM3 LM2, ALL, 20) // R S
ZMK_COMBO(combo_del,    &kp DEL,   LM2 LM1, ALL, 20) // S T
ZMK_COMBO(combo_delw,   &kp LC(BSPC), LM3 LM2 LM1, ALL, 20) // R S T
// ZMK_COMBO(combo_delln,  &delete_line, LM4 LM3 LM2 LM1, ALL, 20) // A R S T
// ZMK_COMBO(combo_newln,  &mm_newline, LM1 LM0, ALL, 20) // T G

ZMK_COMBO(combo_undo,   &kp LC(Z), LB4 LB3, ALL, 20) // Z X
ZMK_COMBO(combo_copy,   &kp LC(C), LB3 LB2, ALL, 20) // X C
ZMK_COMBO(combo_paste,  &kp LC(V), LB2 LB1, ALL, 20) // C D
ZMK_COMBO(combo_cut,    &kp LC(X), LB3 LB2 LB1, ALL, 20) // X C D
// ZMK_COMBO(combo_selln,  &select_line, LB1 LB0, ALL, 20) // D V/*  */

// Right-hand combos:
ZMK_COMBO(combo_tilde,  &kp TILDE, RT0 RT1, ALL, 20) // J L
ZMK_COMBO(combo_excl,   &kp EXCL,  RT1 RT2, ALL, 20) // L U
ZMK_COMBO(combo_qmrk,   &kp QMARK, RT2 RT3, ALL, 20) // U Y
ZMK_COMBO(combo_smcln,  &kp SEMI,  RT1 RT3, ALL, 20) // L Y
ZMK_COMBO(combo_plus,   &kp PLUS,  RT1 RT2 RT3, ALL, 20) // L U Y
ZMK_COMBO(combo_bqt,    &kp GRAVE, RT3 RT4, ALL, 20) // Y ;

ZMK_COMBO(combo_undscr, &kp UNDER, RM0 RM1, ALL, 20) // M N
ZMK_COMBO(combo_dash,   &kp MINUS, RM1 RM2, ALL, 20) // N E
ZMK_COMBO(combo_sqt,    &kp SQT,   RM2 RM3, ALL, 20) // E I
ZMK_COMBO(combo_dqt,    &kp DQT,   RM3 RM4, ALL, 20) // I O
ZMK_COMBO(combo_equal,  &kp EQUAL, RM1 RM2 RM3, ALL, 20) // N E I
ZMK_COMBO(combo_colon,  &kp COLON, RM1 RM3, ALL, 20) // N I

ZMK_COMBO(combo_pipe,   &kp PIPE,  RT0 RM0, ALL, 20) // M J
ZMK_COMBO(combo_fslsh,  &kp FSLH,  RM1 RT2, ALL, 20) // N U
ZMK_COMBO(combo_bslsh,  &kp BSLH,  RT2 RM3, ALL, 20) // U I
ZMK_COMBO(combo_lbkt,   &kp LBKT,  RB1 RM2, ALL, 20) // H E
ZMK_COMBO(combo_rbkt,   &kp RBKT,  RM2 RB3, ALL, 20) // E >

// Conditional Layers
ZMK_CONDITIONAL_LAYER(NUM FUN, MED)

// Using layer taps on thumbs, having quick tap as well helps w/ repeating space/backspace
&lt { quick_tap_ms = <200>; };

/ {
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping_term_ms = <200>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        lt_rpi: layertap_requireprioridle {
            compatible = "zmk,behavior-hold-tap";
            label = "RPI LAYER TAP";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <0>;
            require-prior-idle-ms = <200>;
            flavor = "tap-preferred";
            bindings = <&mo>, <&kp>;
                };

        lt_hp: layertap_holdpreferred {
            compatible = "zmk,behavior-hold-tap";
            label = "HP LAYER TAP";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <0>;
            flavor = "hold-preferred";
            bindings = <&mo>, <&kp>;
                };
    };

// Max 9 characters per key
#define HMLGUIZ   &hm LGUI Z
#define HMLALTX   &hm LALT X
#define HMLCTLC   &hm LCTRL C
#define HMLSFTD   &hm LSHFT D
#define HMRSFTH   &hm RSHFT H
#define HMRCTLCOM &hm RCTRL COMMA
#define HMRALTDOT &hm RALT DOT
#define HMRGUISLH &hm RGUI FSLH
#define LTNAVSPAC &lt_rpi NAV SPACE
#define LTNUMTAB  &lt_hp NUM TAB
#define LTFUNESC  &lt_hp FUN ESC
#define STARSBL   &kp KP_MULTIPLY
#define DESKLEFT  &kp LC(RG(LEFT))
#define DESKRIGHT &kp LC(RG(RIGHT))
#define TASKVIEW  &kp LG(TAB)
#define BTCLR     &bt BT_CLR
#define BTSEL0    &bt BT_SEL 0
#define BTSEL1    &bt BT_SEL 1
#define BTSEL2    &bt BT_SEL 2
#define BTSEL3    &bt BT_SEL 3
#define BTSEL4    &bt BT_SEL 4

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
                &kp Q     &kp W     &kp F     &kp P     &kp B       &kp J     &kp L     &kp U     &kp Y     &kp SEMI
                &kp A     &kp R     &kp S     &kp T     &kp G       &kp M     &kp N     &kp E     &kp I     &kp O
                HMLGUIZ   HMLALTX   HMLCTLC   HMLSFTD   &kp V       &kp K     HMRSFTH   HMRCTLCOM HMRALTDOT HMRGUISLH
                                              LTNUMTAB  LTNAVSPAC   &kp RETURN LTFUNESC
            >;
        };

        num_layer {
            bindings = <
                &kp EXCL  &kp AT    &kp HASH  &kp DLLR  &kp PRCNT   &kp CARET &kp AMPS  STARSBL   &kp LPAR  &kp RPAR
                &kp N1    &kp N2    &kp N3    &kp N4    &kp N5      &kp N6    &kp N7    &kp N8    &kp N9    &kp N0
                &trans    &trans    &trans    &kp N5    &kp PRCNT   &trans    &trans    &trans    &trans    &trans
                                              &trans    &trans      &trans    &trans
            >;
        };

        fun_layer {
            bindings = <
                &kp F1    &kp F2    &kp F3    &kp F4    &kp F5      &kp F6    &kp F7    &kp F8    &kp F9    &kp F10
                &kp F11   &kp F12   &trans    &trans    &trans      &trans    &trans    &trans    &trans    &trans
                BTSEL0    BTSEL1    BTSEL2    BTSEL3    BTSEL4      BTCLR     &trans    &trans    &trans    &trans
                                              &trans    &trans      &trans    &trans
            >;
        };

        nav_layer {
            bindings = <
                &trans    &trans    &kp UP    &trans    &trans      &trans    &kp INS   &kp HOME  &kp PG_UP &trans
                &trans    &kp LEFT  &kp DOWN  &kp RIGHT &trans      &trans    &kp DEL   &kp END   &kp PG_DN &trans
                &trans    DESKLEFT  TASKVIEW  DESKRIGHT &trans      &trans    &trans    &trans    &trans    &trans
                                              &trans    &trans      &trans    &trans
                        >;
                };

        media_layer {
            bindings = <
                &trans    &trans    &trans    &trans    &trans      &trans    &trans    &trans    &trans    &trans
                &trans    &trans    &trans    &trans    &trans      &trans    PREVIOUS  &kp C_PP  NEXT      &trans
                &trans    &trans    &trans    &trans    &trans      &trans    VOLUMDN   &trans    VOLUMUP   &trans
                                              &trans    &trans      &trans    &trans
                        >;
                };
    };
};
